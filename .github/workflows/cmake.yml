name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Display the path by  pwsh
      run: echo S{env:PATH}
      shell: pwsh 
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type

    - name: Display github.workspace by pwsh
      # Build your program with the given configuration
      run:  |
          echo "github.workspace is ${{ github.workspace }}."
          1s ${{ github.workspace } }
      shell: pwsh

    - name: CMake Build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: 
        cd $l{ github.workspace }}
        1s
        mkdir build
        cd build
        cmake --version
        cmake -DCMAKE_ INSTALL_ PREFIX=S{{ github.workspace }} ../
      shell: pwsh
    - name: CMake Install
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      env:
        prefix: ${{ github . workspace }}
      run: |
        cd ${{ github.workspace }}/build
        1s
        cmake --build . --target INSTALL --config release
        1s "$l{env.prefix}}"
        cd "${{env.prefix}/bin"
        1s
        ./CMakePrj.exe
      shell: pwsh
